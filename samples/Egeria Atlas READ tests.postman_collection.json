{
	"info": {
		"_postman_id": "0a7b6a12-da4b-4e87-9dec-77a50b8565a7",
		"name": "Egeria Atlas READ tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "01.1 - Search (byPropertyValue)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f343804f-3cf9-46bd-bb20-6f189cf0b856",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"6 total results\", function () {",
							"    pm.expect(jsonData.entities).to.have.lengthOf(6);",
							"});",
							"pm.test(\"Proper GlossaryTerm entities\", function() {",
							"    for (let i = 0; i < 6; i++) {",
							"        pm.expect(jsonData.entities[i].type.typeDefName).to.equal(\"GlossaryTerm\");",
							"    }",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"class\": \"EntityPropertyFindRequest\",\n\t\"typeGUID\": \"0db3e6ec-f5ef-4d75-ae38-b7ee6fd6ec0a\",\n\t\"pageSize\": 10\n}"
				},
				"url": {
					"raw": "{{baseURL}}/servers/{{server}}/open-metadata/repository-services/users/{{user}}/instances/entities/by-property-value?searchCriteria=.%2A%5CQaddress%5CE.%2A",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"servers",
						"{{server}}",
						"open-metadata",
						"repository-services",
						"users",
						"{{user}}",
						"instances",
						"entities",
						"by-property-value"
					],
					"query": [
						{
							"key": "searchCriteria",
							"value": ".%2A%5CQaddress%5CE.%2A"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "01.2 - Search (byProperty)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f343804f-3cf9-46bd-bb20-6f189cf0b856",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"6 total results\", function () {",
							"    pm.expect(jsonData.entities).to.have.lengthOf(6);",
							"});",
							"pm.test(\"Proper GlossaryTerm entities\", function() {",
							"    for (let i = 0; i < 6; i++) {",
							"        pm.expect(jsonData.entities[i].type.typeDefName).to.equal(\"GlossaryTerm\");",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"class\": \"EntityPropertyFindRequest\",\n\t\"typeGUID\": \"0db3e6ec-f5ef-4d75-ae38-b7ee6fd6ec0a\",\n\t\"pageSize\": 10,\n\t\"matchCriteria\": \"ALL\",\n\t\"matchProperties\": {\n\t\t\"class\": \"InstanceProperties\",\n\t\t\"instanceProperties\": {\n\t\t\t\"displayName\": {\n\t\t\t\t\"class\": \"PrimitivePropertyValue\",\n\t\t\t\t\"instancePropertyCategory\": \"PRIMITIVE\",\n\t\t\t\t\"primitiveDefCategory\": \"OM_PRIMITIVE_TYPE_STRING\",\n\t\t\t\t\"primitiveValue\": \".*\\\\QAddress\\\\E.*\"\n\t\t\t}\n\t\t}\n\t}\n}"
				},
				"url": {
					"raw": "{{baseURL}}/servers/{{server}}/open-metadata/repository-services/users/{{user}}/instances/entities/by-property",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"servers",
						"{{server}}",
						"open-metadata",
						"repository-services",
						"users",
						"{{user}}",
						"instances",
						"entities",
						"by-property"
					]
				}
			},
			"response": []
		},
		{
			"name": "01.3 - Search (byProperty) ANY",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f343804f-3cf9-46bd-bb20-6f189cf0b856",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"8 total results\", function () {",
							"    pm.expect(jsonData.entities).to.have.lengthOf(7);",
							"});",
							"pm.test(\"Proper GlossaryTerm entities\", function() {",
							"    for (let i = 0; i < 7; i++) {",
							"        pm.expect(jsonData.entities[i].type.typeDefName).to.equal(\"GlossaryTerm\");",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"class\": \"EntityPropertyFindRequest\",\n\t\"typeGUID\": \"0db3e6ec-f5ef-4d75-ae38-b7ee6fd6ec0a\",\n\t\"pageSize\": 10,\n\t\"matchCriteria\": \"ANY\",\n\t\"matchProperties\": {\n\t\t\"class\": \"InstanceProperties\",\n\t\t\"instanceProperties\": {\n\t\t\t\"displayName\": {\n\t\t\t\t\"class\": \"PrimitivePropertyValue\",\n\t\t\t\t\"instancePropertyCategory\": \"PRIMITIVE\",\n\t\t\t\t\"primitiveDefCategory\": \"OM_PRIMITIVE_TYPE_STRING\",\n\t\t\t\t\"primitiveValue\": \".*\\\\QAddress\\\\E.*\"\n\t\t\t},\n\t\t\t\"summary\": {\n\t\t\t\t\"class\": \"PrimitivePropertyValue\",\n\t\t\t\t\"instancePropertyCategory\": \"PRIMITIVE\",\n\t\t\t\t\"primitiveDefCategory\": \"OM_PRIMITIVE_TYPE_STRING\",\n\t\t\t\t\"primitiveValue\": \".*\\\\QNumber\\\\E.*\"\n\t\t\t}\n\t\t}\n\t}\n}"
				},
				"url": {
					"raw": "{{baseURL}}/servers/{{server}}/open-metadata/repository-services/users/{{user}}/instances/entities/by-property",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"servers",
						"{{server}}",
						"open-metadata",
						"repository-services",
						"users",
						"{{user}}",
						"instances",
						"entities",
						"by-property"
					]
				}
			},
			"response": []
		},
		{
			"name": "01.4 - Search (byProperty) ALL",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f343804f-3cf9-46bd-bb20-6f189cf0b856",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"1 total results\", function () {",
							"    pm.expect(jsonData.entities).to.have.lengthOf(1);",
							"});",
							"pm.test(\"Proper GlossaryTerm entity\", function() {",
							"    pm.expect(jsonData.entities[0].type.typeDefName).to.equal(\"GlossaryTerm\");",
							"    pm.expect(jsonData.entities[0].properties.instanceProperties.qualifiedName.primitiveValue).to.equal(\"Address Line 1@Coco Pharmaceuticals\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"class\": \"EntityPropertyFindRequest\",\n\t\"typeGUID\": \"0db3e6ec-f5ef-4d75-ae38-b7ee6fd6ec0a\",\n\t\"pageSize\": 10,\n\t\"matchCriteria\": \"ALL\",\n\t\"matchProperties\": {\n\t\t\"class\": \"InstanceProperties\",\n\t\t\"instanceProperties\": {\n\t\t\t\"displayName\": {\n\t\t\t\t\"class\": \"PrimitivePropertyValue\",\n\t\t\t\t\"instancePropertyCategory\": \"PRIMITIVE\",\n\t\t\t\t\"primitiveDefCategory\": \"OM_PRIMITIVE_TYPE_STRING\",\n\t\t\t\t\"primitiveValue\": \".*\\\\QAddress\\\\E.*\"\n\t\t\t},\n\t\t\t\"summary\": {\n\t\t\t\t\"class\": \"PrimitivePropertyValue\",\n\t\t\t\t\"instancePropertyCategory\": \"PRIMITIVE\",\n\t\t\t\t\"primitiveDefCategory\": \"OM_PRIMITIVE_TYPE_STRING\",\n\t\t\t\t\"primitiveValue\": \".*\\\\Qnumber\\\\E.*\"\n\t\t\t}\n\t\t}\n\t}\n}"
				},
				"url": {
					"raw": "{{baseURL}}/servers/{{server}}/open-metadata/repository-services/users/{{user}}/instances/entities/by-property",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"servers",
						"{{server}}",
						"open-metadata",
						"repository-services",
						"users",
						"{{user}}",
						"instances",
						"entities",
						"by-property"
					]
				}
			},
			"response": []
		},
		{
			"name": "01.5 - Search supertype (byPropertyValue)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f343804f-3cf9-46bd-bb20-6f189cf0b856",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"2 total results\", function () {",
							"    pm.expect(jsonData.entities).to.have.lengthOf(2);",
							"});",
							"pm.test(\"Proper Database or DataStore entities\", function() {",
							"    for (let i = 0; i < 2; i++) {",
							"        pm.expect(jsonData.entities[i].type.typeDefName).to.be.oneOf([\"Database\",\"DataStore\"]);",
							"    }",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"class\": \"EntityPropertyFindRequest\",\n\t\"typeGUID\": \"896d14c2-7522-4f6c-8519-757711943fe6\",\n\t\"pageSize\": 10\n}"
				},
				"url": {
					"raw": "{{baseURL}}/servers/{{server}}/open-metadata/repository-services/users/{{user}}/instances/entities/by-property-value?searchCriteria=.%2A%5CQdefault%5CE.%2A",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"servers",
						"{{server}}",
						"open-metadata",
						"repository-services",
						"users",
						"{{user}}",
						"instances",
						"entities",
						"by-property-value"
					],
					"query": [
						{
							"key": "searchCriteria",
							"value": ".%2A%5CQdefault%5CE.%2A"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "01.6 - Search everything (byPropertyValue)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f343804f-3cf9-46bd-bb20-6f189cf0b856",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"6 total results\", function () {",
							"    pm.expect(jsonData.entities).to.have.lengthOf(6);",
							"});",
							"pm.test(\"Proper GlossaryTerm entity\", function() {",
							"    for (let i = 0; i < 6; i++) {",
							"        pm.expect(jsonData.entities[i].type.typeDefName).to.be.oneOf([\"GlossaryTerm\"]);",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"class\": \"EntityPropertyFindRequest\",\n\t\"pageSize\": 500\n}"
				},
				"url": {
					"raw": "{{baseURL}}/servers/{{server}}/open-metadata/repository-services/users/{{user}}/instances/entities/by-property-value?searchCriteria=.%2A%5CQaddress%5CE.%2A",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"servers",
						"{{server}}",
						"open-metadata",
						"repository-services",
						"users",
						"{{user}}",
						"instances",
						"entities",
						"by-property-value"
					],
					"query": [
						{
							"key": "searchCriteria",
							"value": ".%2A%5CQaddress%5CE.%2A"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "01.7 - Search everything (limitByClassification)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f343804f-3cf9-46bd-bb20-6f189cf0b856",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"6 total results\", function () {",
							"    pm.expect(jsonData.entities).to.have.lengthOf(6);",
							"});",
							"pm.test(\"Proper GlossaryTerm entity\", function() {",
							"    for (let i = 0; i < 6; i++) {",
							"        pm.expect(jsonData.entities[i].type.typeDefName).to.equal(\"GlossaryTerm\");",
							"        pm.expect(jsonData.entities[i].classifications[0].type.typeDefName).to.equal(\"Confidentiality\");",
							"        pm.expect(jsonData.entities[i].classifications[0].properties.instanceProperties['status'].symbolicName).to.equal(\"Validated\");",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"class\": \"EntityPropertyFindRequest\",\n\t\"pageSize\": 500,\n\t\"limitResultsByClassification\": [\"Confidentiality\"]\n}"
				},
				"url": {
					"raw": "{{baseURL}}/servers/{{server}}/open-metadata/repository-services/users/{{user}}/instances/entities/by-property-value?searchCriteria=.%2A%5CQaddress%5CE.%2A",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"servers",
						"{{server}}",
						"open-metadata",
						"repository-services",
						"users",
						"{{user}}",
						"instances",
						"entities",
						"by-property-value"
					],
					"query": [
						{
							"key": "searchCriteria",
							"value": ".%2A%5CQaddress%5CE.%2A"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "01.8 - Search (byClassification)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f343804f-3cf9-46bd-bb20-6f189cf0b856",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"12 total results\", function () {",
							"    pm.expect(jsonData.entities).to.have.lengthOf(12);",
							"});",
							"pm.test(\"Proper GlossaryTerm entities\", function() {",
							"    for (let i = 0; i < 12; i++) {",
							"        pm.expect(jsonData.entities[i].type.typeDefName).to.equal(\"GlossaryTerm\");",
							"        pm.expect(jsonData.entities[i].classifications[0].type.typeDefName).to.equal(\"Confidentiality\");",
							"        pm.expect(jsonData.entities[i].classifications[0].properties.instanceProperties['level'].primitiveValue).to.equal(3);",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"class\": \"EntityPropertyFindRequest\",\n\t\"typeGUID\": \"0db3e6ec-f5ef-4d75-ae38-b7ee6fd6ec0a\",\n\t\"pageSize\": 100,\n\t\"matchCriteria\": \"ALL\",\n\t\"matchProperties\": {\n\t\t\"class\": \"InstanceProperties\",\n\t\t\"instanceProperties\": {\n\t\t\t\"level\": {\n\t\t\t\t\"class\": \"PrimitivePropertyValue\",\n\t\t\t\t\"instancePropertyCategory\": \"PRIMITIVE\",\n                \"typeGUID\": \"7fc49104-fd3a-46c8-b6bf-f16b6074cd35\",\n\t\t\t\t\"typeName\": \"int\",\n                \"primitiveDefCategory\": \"OM_PRIMITIVE_TYPE_INT\",\n                \"primitiveValue\": 3\n\t\t\t}\n\t\t}\n\t}\n}"
				},
				"url": {
					"raw": "{{baseURL}}/servers/{{server}}/open-metadata/repository-services/users/{{user}}/instances/entities/by-classification/Confidentiality",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"servers",
						"{{server}}",
						"open-metadata",
						"repository-services",
						"users",
						"{{user}}",
						"instances",
						"entities",
						"by-classification",
						"Confidentiality"
					]
				}
			},
			"response": []
		},
		{
			"name": "02.1 - Get Hive Table",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ec0d8ff-68aa-4207-a7ca-3634c4663b42",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"TypeDef is RelationalTable\", function () {",
							"    pm.expect(jsonData.entity.type.typeDefName).to.equal(\"RelationalTable\");",
							"});",
							"pm.test(\"Proper RelationalTable entity\", function() {",
							"    pm.expect(jsonData.entity.properties.instanceProperties.displayName.primitiveValue).to.equal(\"test_hive_table1\");",
							"    pm.expect(jsonData.entity.properties.instanceProperties.qualifiedName.primitiveValue).to.equal(\"default.test_hive_table1@Sandbox\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/servers/{{server}}/open-metadata/repository-services/users/{{user}}/instances/entity/:guid",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"servers",
						"{{server}}",
						"open-metadata",
						"repository-services",
						"users",
						"{{user}}",
						"instances",
						"entity",
						":guid"
					],
					"variable": [
						{
							"key": "guid",
							"value": "43d06265-3f0a-451d-a4ba-30d5ea99b1a6"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "02.2 - Get Hive TableType",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ec0d8ff-68aa-4207-a7ca-3634c4663b42",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"TypeDef is RelationalTableType\", function () {",
							"    pm.expect(jsonData.entity.type.typeDefName).to.equal(\"RelationalTableType\");",
							"});",
							"pm.test(\"Proper RelationalTableType entity\", function() {",
							"    pm.expect(jsonData.entity.properties.instanceProperties.qualifiedName.primitiveValue).to.equal(\"default.test_hive_table1@Sandbox\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/servers/{{server}}/open-metadata/repository-services/users/{{user}}/instances/entity/:guid",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"servers",
						"{{server}}",
						"open-metadata",
						"repository-services",
						"users",
						"{{user}}",
						"instances",
						"entity",
						":guid"
					],
					"variable": [
						{
							"key": "guid",
							"value": "__|RTT|__43d06265-3f0a-451d-a4ba-30d5ea99b1a6"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "02.3 - Get Hive Table relationships",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "30418654-3f98-4563-a066-5fbe893737a8",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"2 total relationships\", function () {",
							"    pm.expect(jsonData.relationships).to.have.lengthOf(2);",
							"});",
							"pm.test(\"Proper AttributeForSchema relationship\", function() {",
							"    pm.expect(jsonData.relationships[0].type.typeDefName).to.equal(\"AttributeForSchema\");",
							"    pm.expect(jsonData.relationships[0].entityOneProxy.type.typeDefName).to.equal(\"RelationalDBSchemaType\");",
							"    pm.expect(jsonData.relationships[0].entityOneProxy.uniqueProperties.instanceProperties.qualifiedName.primitiveValue).to.equal(\"default.test_hive_table1@Sandbox_storage\");",
							"    pm.expect(jsonData.relationships[0].entityTwoProxy.type.typeDefName).to.equal(\"RelationalTable\");",
							"    pm.expect(jsonData.relationships[0].entityTwoProxy.uniqueProperties.instanceProperties.qualifiedName.primitiveValue).to.equal(\"default.test_hive_table1@Sandbox\");",
							"});",
							"pm.test(\"Proper SchemaAttributeType relationship\", function() {",
							"    pm.expect(jsonData.relationships[1].type.typeDefName).to.equal(\"SchemaAttributeType\");",
							"    pm.expect(jsonData.relationships[1].entityOneProxy.type.typeDefName).to.equal(\"RelationalTable\");",
							"    pm.expect(jsonData.relationships[1].entityOneProxy.uniqueProperties.instanceProperties.qualifiedName.primitiveValue).to.equal(\"default.test_hive_table1@Sandbox\");",
							"    pm.expect(jsonData.relationships[1].entityTwoProxy.type.typeDefName).to.equal(\"RelationalTableType\");",
							"    pm.expect(jsonData.relationships[1].entityTwoProxy.uniqueProperties.instanceProperties.qualifiedName.primitiveValue).to.equal(\"default.test_hive_table1@Sandbox\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"class\": \"TypeLimitedFindRequest\",\n\t\"pageSize\": 100\n}"
				},
				"url": {
					"raw": "{{baseURL}}/servers/{{server}}/open-metadata/repository-services/users/{{user}}/instances/entity/:guid/relationships",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"servers",
						"{{server}}",
						"open-metadata",
						"repository-services",
						"users",
						"{{user}}",
						"instances",
						"entity",
						":guid",
						"relationships"
					],
					"variable": [
						{
							"key": "guid",
							"value": "43d06265-3f0a-451d-a4ba-30d5ea99b1a6"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "02.4 - Get Hive TableType relationships",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "30418654-3f98-4563-a066-5fbe893737a8",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"4 total relationships\", function () {",
							"    pm.expect(jsonData.relationships).to.have.lengthOf(4);",
							"});",
							"pm.test(\"Proper AttributeForSchema relationships\", function() {",
							"    for (let i = 0; i < 2; i++) {",
							"        pm.expect(jsonData.relationships[i].type.typeDefName).to.equal(\"AttributeForSchema\");",
							"        pm.expect(jsonData.relationships[i].entityOneProxy.type.typeDefName).to.equal(\"RelationalTableType\");",
							"        pm.expect(jsonData.relationships[i].entityOneProxy.uniqueProperties.instanceProperties.qualifiedName.primitiveValue).to.equal(\"default.test_hive_table1@Sandbox\");",
							"        pm.expect(jsonData.relationships[i].entityTwoProxy.type.typeDefName).to.equal(\"RelationalColumn\");",
							"        pm.expect(jsonData.relationships[i].entityTwoProxy.uniqueProperties.instanceProperties.qualifiedName.primitiveValue).to.contain(\"default.test_hive_table1\");",
							"    }",
							"});",
							"pm.test(\"Proper AssetSchemaType relationship\", function() {",
							"    pm.expect(jsonData.relationships[2].type.typeDefName).to.equal(\"AssetSchemaType\");",
							"    pm.expect(jsonData.relationships[2].entityOneProxy.type.typeDefName).to.equal(\"Database\");",
							"    pm.expect(jsonData.relationships[2].entityOneProxy.uniqueProperties.instanceProperties.qualifiedName.primitiveValue).to.equal(\"default@Sandbox\");",
							"    pm.expect(jsonData.relationships[2].entityTwoProxy.type.typeDefName).to.equal(\"RelationalTableType\");",
							"    pm.expect(jsonData.relationships[2].entityTwoProxy.uniqueProperties.instanceProperties.qualifiedName.primitiveValue).to.equal(\"default.test_hive_table1@Sandbox\");",
							"});",
							"pm.test(\"Proper SchemaAttributeType relationship\", function() {",
							"    pm.expect(jsonData.relationships[3].type.typeDefName).to.equal(\"SchemaAttributeType\");",
							"    pm.expect(jsonData.relationships[3].entityOneProxy.type.typeDefName).to.equal(\"RelationalTable\");",
							"    pm.expect(jsonData.relationships[3].entityOneProxy.uniqueProperties.instanceProperties.qualifiedName.primitiveValue).to.equal(\"default.test_hive_table1@Sandbox\");",
							"    pm.expect(jsonData.relationships[3].entityTwoProxy.type.typeDefName).to.equal(\"RelationalTableType\");",
							"    pm.expect(jsonData.relationships[3].entityTwoProxy.uniqueProperties.instanceProperties.qualifiedName.primitiveValue).to.equal(\"default.test_hive_table1@Sandbox\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"class\": \"TypeLimitedFindRequest\",\n\t\"pageSize\": 100\n}"
				},
				"url": {
					"raw": "{{baseURL}}/servers/{{server}}/open-metadata/repository-services/users/{{user}}/instances/entity/:guid/relationships",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"servers",
						"{{server}}",
						"open-metadata",
						"repository-services",
						"users",
						"{{user}}",
						"instances",
						"entity",
						":guid",
						"relationships"
					],
					"variable": [
						{
							"key": "guid",
							"value": "__|RTT|__43d06265-3f0a-451d-a4ba-30d5ea99b1a6"
						}
					]
				}
			},
			"response": []
		}
	]
}